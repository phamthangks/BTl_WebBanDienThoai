@{
    ViewData["Title"] = "Contact";
    Layout = "~/Views/Shared/_LayoutContact.cshtml";
}

<div class="chat-container">
    <div class="chat-box">
        <!-- Phần header của chat box -->
        <div class="chat-header">
            <div class="chat-admin-info">
                <img src="~/Images/Admin/admin-avatar.jpg" alt="Admin" class="admin-avatar">
                <div class="admin-details">
                    <h5 class="admin-name">Admin Support</h5>
                    <span class="admin-status">Online</span>
                </div>
            </div>
        </div>

        <!-- Phần nội dung chat -->
        <div class="chat-messages" id="messagesList">
            <!-- Tin nhắn sẽ được thêm vào đây qua JavaScript -->
        </div>

        <!-- Phần nhập tin nhắn -->
        <div class="chat-input-container">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn...">
                <div class="input-group-append">
                    <button class="btn btn-primary" type="button" id="sendButton">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        height: calc(100vh - 400px);
        min-height: 500px;
        position: relative;
    }

    .chat-box {
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .chat-header {
        background: #f8f9fa;
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
    }

    .chat-admin-info {
        display: flex;
        align-items: center;
    }

    .admin-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .admin-details {
        flex: 1;
    }

    .admin-name {
        margin: 0;
        font-size: 16px;
    }

    .admin-status {
        font-size: 12px;
        color: #28a745;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        background: #f8f9fa;
        scroll-behavior: smooth;
        position: relative;
    }

    .message {
        margin-bottom: 15px;
        display: flex;
        flex-direction: column;
    }

    .message-content {
        max-width: 70%;
        padding: 10px 15px;
        border-radius: 20px;
        margin-bottom: 5px;
    }

    .message.received {
        align-items: flex-start;
    }

    .message.sent {
        align-items: flex-end;
    }

    .message.received .message-content {
        background: #e9ecef;
        color: #000;
    }

    .message.sent .message-content {
        background: #D8B4FE;
        color: #000;
    }

    .message-time {
        font-size: 12px;
        color: #6c757d;
    }

    .chat-input-container {
        padding: 15px;
        background: #fff;
        border-top: 1px solid #dee2e6;
        position: sticky;
        bottom: 0;
        width: 100%;
    }

    .chat-input-container .form-control {
        border-radius: 20px;
        padding-right: 50px;
    }

    .chat-input-container .btn {
        border-radius: 20px;
        padding: 8px 15px;
        margin-left: 10px;
    }

    html, body {
        scroll-behavior: auto !important;
        overflow-x: hidden;
    }

    .contact-form {
        height: 100%;
        display: flex;
        flex-direction: column;
    }
</style>

<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

<script>
    let connection = null;
    let currentCustomerId = '@Context.Session.GetString("Username")';

    async function initializeConnection() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .withAutomaticReconnect()
            .build();

        // Xử lý nhận tin nhắn
        connection.on("ReceiveMessage", function (loaiNguoiGui, message, thoiGian) {
            const messagesList = document.getElementById("messagesList");
            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${loaiNguoiGui === 'admin' ? 'received' : 'sent'}`;
            
            messageDiv.innerHTML = `
                <div class="message-content">${message}</div>
                <div class="message-time">${new Date(thoiGian).toLocaleTimeString()}</div>
            `;
            
            messagesList.appendChild(messageDiv);
            
            // Chỉ cuộn xuống khi có tin nhắn mới
            requestAnimationFrame(() => {
                messagesList.scrollTop = messagesList.scrollHeight;
            });
        });

        // Xử lý load lịch sử tin nhắn
        connection.on("LoadMessageHistory", function (messages) {
            const messagesList = document.getElementById("messagesList");
            messagesList.innerHTML = '';
            
            messages.forEach(msg => {
                const messageDiv = document.createElement("div");
                messageDiv.className = `message ${msg.loaiNguoiGui === 'admin' ? 'received' : 'sent'}`;
                
                messageDiv.innerHTML = `
                    <div class="message-content">${msg.noiDung}</div>
                    <div class="message-time">${new Date(msg.thoiGian).toLocaleTimeString()}</div>
                `;
                
                messagesList.appendChild(messageDiv);
            });
            
            // Chỉ cuộn xuống khi load lần đầu
            if (messages.length > 0) {
                requestAnimationFrame(() => {
                    messagesList.scrollTop = messagesList.scrollHeight;
                });
            }
        });

        try {
            await connection.start();
            console.log("SignalR Connected.");
            
            // Load tin nhắn sau khi kết nối thành công
            if (currentCustomerId) {
                await connection.invoke("LoadMessages", currentCustomerId);
            }
        } catch (err) {
            console.error(err);
            setTimeout(initializeConnection, 5000);
        }
    }

    async function sendMessage() {
        const messageInput = document.getElementById("messageInput");
        const message = messageInput.value.trim();
        
        if (message && currentCustomerId && connection) {
            try {
                await connection.invoke("SendMessage", message, currentCustomerId);
                messageInput.value = '';
            } catch (err) {
                console.error(err);
            }
        }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
        const sendButton = document.getElementById("sendButton");
        const messageInput = document.getElementById("messageInput");
        
        if (sendButton) {
            sendButton.addEventListener("click", sendMessage);
        }
        
        if (messageInput) {
            messageInput.addEventListener("keypress", function(e) {
                if (e.key === "Enter") {
                    sendMessage();
                }
            });
        }

        if (currentCustomerId) {
            initializeConnection();
        }

        // Prevent automatic scrolling
        window.history.scrollRestoration = 'manual';
    });
</script>
